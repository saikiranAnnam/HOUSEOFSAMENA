export interface Handler {
    (...args: any[]): any;
}
/**
 * Create an async series hook.
 * Upon execution, it will execute every handler in order with the same context
 */
declare const createAsyncSeriesHook: <T extends Handler = Handler>() => {
    call(context: unknown): Promise<void>;
    getHandlers(): T[];
    register(handler: T): {
        getHandlers(): T[];
        register(handler: T): any;
        delete(handler: T): any;
        call(): never;
    };
    delete(handler: T): {
        getHandlers(): T[];
        register(handler: T): any;
        delete(handler: T): any;
        call(): never;
    };
};
/**
 * Create an async series waterfall hook.
 * Upon execution, it will execute every handler in order and pass the return value of the last handler to the next one
 */
declare const createAsyncSeriesWaterfallHook: <T extends Handler = Handler>() => {
    call(param: unknown): Promise<unknown>;
    getHandlers(): T[];
    register(handler: T): {
        getHandlers(): T[];
        register(handler: T): any;
        delete(handler: T): any;
        call(): never;
    };
    delete(handler: T): {
        getHandlers(): T[];
        register(handler: T): any;
        delete(handler: T): any;
        call(): never;
    };
};
/**
 * Create an async parallel hook.
 * Upon execution, it will execute every registered handler in band.
 */
declare const createAsyncParallelHook: <T extends Handler = Handler>() => {
    call(context: unknown): Promise<any[]>;
    getHandlers(): T[];
    register(handler: T): {
        getHandlers(): T[];
        register(handler: T): any;
        delete(handler: T): any;
        call(): never;
    };
    delete(handler: T): {
        getHandlers(): T[];
        register(handler: T): any;
        delete(handler: T): any;
        call(): never;
    };
};
/**
 * Create an async parallel hook.
 * Upon execution, it will execute every registered handler in serie and return the first result found.
 */
declare const createAsyncBailHook: <T extends Handler = Handler>() => {
    call(context: unknown): Promise<any>;
    getHandlers(): T[];
    register(handler: T): {
        getHandlers(): T[];
        register(handler: T): any;
        delete(handler: T): any;
        call(): never;
    };
    delete(handler: T): {
        getHandlers(): T[];
        register(handler: T): any;
        delete(handler: T): any;
        call(): never;
    };
};
export declare const internals: {
    createHook: <T extends Handler = Handler>() => {
        getHandlers(): T[];
        register(handler: T): any;
        delete(handler: T): any;
        call(): never;
    };
};
export { createAsyncSeriesHook, createAsyncSeriesWaterfallHook, createAsyncParallelHook, createAsyncBailHook, };
