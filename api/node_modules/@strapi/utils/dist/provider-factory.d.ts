export interface Options {
    throwOnDuplicates?: boolean;
}
/**
 * A Provider factory
 */
declare const providerFactory: (options?: Options) => {
    hooks: {
        willRegister: {
            call(context: unknown): Promise<void>;
            getHandlers(): import("./hooks").Handler[];
            register(handler: import("./hooks").Handler): {
                getHandlers(): import("./hooks").Handler[];
                register(handler: import("./hooks").Handler): any;
                delete(handler: import("./hooks").Handler): any;
                call(): never;
            };
            delete(handler: import("./hooks").Handler): {
                getHandlers(): import("./hooks").Handler[];
                register(handler: import("./hooks").Handler): any;
                delete(handler: import("./hooks").Handler): any;
                call(): never;
            };
        };
        didRegister: {
            call(context: unknown): Promise<any[]>;
            getHandlers(): import("./hooks").Handler[];
            register(handler: import("./hooks").Handler): {
                getHandlers(): import("./hooks").Handler[];
                register(handler: import("./hooks").Handler): any;
                delete(handler: import("./hooks").Handler): any;
                call(): never;
            };
            delete(handler: import("./hooks").Handler): {
                getHandlers(): import("./hooks").Handler[];
                register(handler: import("./hooks").Handler): any;
                delete(handler: import("./hooks").Handler): any;
                call(): never;
            };
        };
        willDelete: {
            call(context: unknown): Promise<any[]>;
            getHandlers(): import("./hooks").Handler[];
            register(handler: import("./hooks").Handler): {
                getHandlers(): import("./hooks").Handler[];
                register(handler: import("./hooks").Handler): any;
                delete(handler: import("./hooks").Handler): any;
                call(): never;
            };
            delete(handler: import("./hooks").Handler): {
                getHandlers(): import("./hooks").Handler[];
                register(handler: import("./hooks").Handler): any;
                delete(handler: import("./hooks").Handler): any;
                call(): never;
            };
        };
        didDelete: {
            call(context: unknown): Promise<any[]>;
            getHandlers(): import("./hooks").Handler[];
            register(handler: import("./hooks").Handler): {
                getHandlers(): import("./hooks").Handler[];
                register(handler: import("./hooks").Handler): any;
                delete(handler: import("./hooks").Handler): any;
                call(): never;
            };
            delete(handler: import("./hooks").Handler): {
                getHandlers(): import("./hooks").Handler[];
                register(handler: import("./hooks").Handler): any;
                delete(handler: import("./hooks").Handler): any;
                call(): never;
            };
        };
    };
    register(key: string, item: unknown): Promise<any>;
    delete(key: string): Promise<any>;
    get(key: string): any;
    getWhere(filters?: {}): any[];
    values(): any[];
    keys(): any[];
    has(key: string): boolean;
    size(): number;
    clear(): Promise<any>;
};
export default providerFactory;
